import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:todo_app_route/database/task_model.dart';
import 'package:todo_app_route/utils/date_format.dart';

class MyDatabase {

  static CollectionReference<Task> getTasksCollection(){
    var tasksCollection = FirebaseFirestore.instance
        .collection('tasks')
        .withConverter<Task>(fromFirestore:(snapshot, options) => Task.fromFireStore(snapshot.data()!),
        toFirestore: (task,options)=> task.toFireStore());
    return tasksCollection;
  }
  static Future <void> insertTask(Task task) {
    var tasksCollection = getTasksCollection();
    // handle task id
    var doc = tasksCollection.doc();
    task.id = doc.id;
    task.dateTime = MyDateUtils.extractDateOnly(task.dateTime);
    return doc.set(task); // inserting task with autogenerated id done!
  }

  static Future <List<Task>> getTasks (DateTime dateTime) async{
    var querySnapshot = await getTasksCollection()
        .where('dateTime' , isEqualTo: MyDateUtils.extractDateOnly(dateTime).millisecondsSinceEpoch)
        .get();
    var tasksList = querySnapshot.docs.map((doc) => doc.data()).toList();
    return tasksList;
  }

  static Future<QuerySnapshot<Task>> getTasksFuture(DateTime dateTime){
    return getTasksCollection()
        .where('dateTime' , isEqualTo: MyDateUtils.extractDateOnly(dateTime).millisecondsSinceEpoch)
        .get();
  }

  static Stream<QuerySnapshot<Task>> getTasksRealTimeUpdates(DateTime dateTime){
    return getTasksCollection()
        .where('dateTime' , isEqualTo: MyDateUtils.extractDateOnly(dateTime).millisecondsSinceEpoch)
        .snapshots();
  }

  static Future<void> deleteTask(Task task){
   var taskDoc =  getTasksCollection().doc(task.id);
   return taskDoc.delete();
  }
  static markAsDone(Task task){
    task.isDone = true;
    getTasksCollection()
    .doc(task.id)
    .set(task);
  }
}